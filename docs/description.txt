Описание

==> Общие сведения

Игра представляет собой случайно карту загруженную из текстового файла, по которой игрок ходит, встречает зомби, сражается с ними, подбирает призы.

[Карта в текстовом файле имеет следующий формат:
* карта должна быть прямоугольной
* карта состоит из символов ".", "#", "I", "A", "M"
* символ "." - пустая клетка поля
* символ "#" - стена
* символ "I" - Immutable объект (приз)
* символ "A" - главный герой, только один на карту
* символ "M" - зомби
Клетка на которой находится гл.герой, зомби или приз автоматически считается пустой.]

В игре присутствуют призы, которые можно подбирать, приз может быть либо едой, либо инвентарем. Еда повышает health points.
Инвентарь увеличивает урон наносимый игроком.

По карте разбросаны зомби, которые атакуют игрока при встрече. Игрок может атаковать их в ответ.
Процесс игры осуществляется пошагово.

Запуск программы начинается со стартового окна.
Игра начинается при нажатии любой стрелки.
Перемещение по карте осуществляется при помощи кнопок со стрелками.
Для атаки монстра необходимо попытаться занять позицию на которой монстр находится в данный момент.
У любого персонажа высвечивается шкала здоровья + в текстовом окне есть информация о здоровье гл. героя и одетом инвентаре.
Если в данный момент игрок находится на одной клетке с каким-либо предметом, то он его подбирает.
Предмет может быть либо едой (+50 hp), либо инвентарем (*1.5 сила урона)

Урон наносится при попытке перейти на клетку противника (если переходите именно вы, то и больший урон нанесете вы,
т.е. выгодно атаковать).
Также больший урон можно нанести если атаковать противника в голову, т.е. сверху, но и противник атакующий вас сверху
нанесет больше ущерба.

При нажатии кнопки u моно скинуть последнюю амуницию.

При нажатии кнопки q игра завершается.

==> Роли и случаи использования
В игре присутствует одна роль: пользователь. Единственный случай использования: играть.
Цель игры - победить всех зомби.

==> Описание типичного пользователя

Предположительно это человек, желающий сделать перерыв в работе и немного развлечься.
Типичное время игры вряд ли превысит 15 минут.

==> Architectural drivers

Решение писать проект на языке python обосновано тем, что именно этот язык разработчик знает лучше всего и написание приложение
заняло относительно мало времени. Движок pygame выбран как один из самых популярных в мире Python и из-за наличия небольших
туториалов по написанию игр.

Все взаимодействие игрока и существ завязано на карте, по которой они двигаются. По этой причине логично сделать некоторый пакет,
который будет знать всё про всех, и все будут знать про него. В данном случае таким пакет является компонента Context, которая содержит контейнеры
объектов игрового взаимодействия и карту.
Сама карта может состоять из объектов двух типов: пустая клетка и стена. На пустых клетках могут находиться объекты игрового взаимодействия,
причем по несколько на одной клетке одновременно. В связи с этим в каждой клетке хранится стек ссылок на объекты игорового взаимодействия в порядке
их размещения в этой клетке.
Также в основном контексте хранятся контейнеры основных объектов по типам для быстрого доступа к объектам данного типа (не через карту).

==> Диаграмма компонент

Вся система разбивается на следующие компоненты:

UI, GameEngine – интерфейс пользователя и движок предоставляемые библиотекой pygame.
Context – основной контекст игры, хранит релевантное состояние карты, персонажей, призов.
Views - компонент отвечающий за отрисовку всех видимых объектов игры.
Actors - компонент отвечающий за состояние персонажей, за их передвижение и взаимодействие.
Maps - компонент отвечающий за хранение взаимного расположение всех объектов игры.
Immovables - компонент отвечающий за призы.

==> Диаграмма классов

Интерфейс Drawable реализуют все классы, которые отображаются на экране.
Интерфейс Updatable реализуют те классы, которые могут изменить свое состояние в результате очередного хода.
Класс Map хранит взаимное расположение объектов, но сам он не отображаем, за его отображение отвечает абстрактный класс
AbstractMapView и его наследники, которые хранят ссылку на объект класса Map внутри себя.
Класс Map хранит в себе сетку, ячейка сетки состоит из подложки (background) и объектов игрового взаимодействия размещаемых на ней.

Все Персонажи наследуются от класса AbstactActor. В настоящий момент присутствует два вида персонажей MainActor и Mob (зомби).
В классе контекст есть список хэндлеров, которые надо вызвать на то или иное событие, что бы обновить их состояние.
Затем запускается перерисовка всех объектов, которые могут быть перерисованы.

Классы контейнеры служат для быстрой адресовки к сущностям определенного вида.

==> Диаграмма последовательностей

Движок pygame отлавливает действия пользователя и передает управление экземпляру класса Context.
Тот в свою очередь отбирает только интересующие нас события и приступает к их обработке.
Отбираются экземпляры тех сущностей которые могут изменить свое состояние под действием исключительно данного событий,
на данный момент это только Персонажи. Им передается управление.
Персонажи поочередно обновляют свое состояние и состояние контекста (например, состояние карты и призов).
И возвращают управление контексту. Тот вызывает у всех отображаемых объектов соответствующий метод и отрисовывает их на объекте pygame.surface.
Далее управление возвращается движку pygame, который уже отрисовывает объект surface.

==> Диаграмма конечных автоматов

Есть три события меняющих состояние: нажатие кл. q, нажатие кл. u, нажатие стрелки.
1) Завершаем игру
2) Скидываем последнюю амуницию, если такая имеется
3) Пытаемся перейти в соответствующую нажатой клавише клетку.

Либо наталкиваемся на стену, тогда возвращаемся в исходное состояние,
Либо наталкиваемся на зомби и сражаемся с ним,
Либо наталкиваемся на пустую клетку, в которой возможно есть приз.

Если в результате этих действия гл.герой не погиб и не победил всех зомби, то переходим в исходное состояние.